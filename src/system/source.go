package system

import (
	"bufio"
	"errors"
	"fmt"
	"io/ioutil"
	"os"
	"strings"
	"time"

	"github.com/skmonir/mango/src/config"
	"github.com/skmonir/mango/src/utils"
)

func getTemplateHeader(author string, problemName string) string {
	header := "/**\n"
	header += fmt.Sprintf(" *     author:  %v\n", author)
	header += fmt.Sprintf(" *    created:  %v\n", time.Now().Local().Format("2-Jan-2006 15:04:05"))
	header += fmt.Sprintf(" *    problem:  %v\n", problemName)
	header += " *\n"
	header += " *    Template generated by 'mango', https://github.com/skmonir/mango\n"
	header += "**/\n\n"

	return header
}

func getGenericTemplateBody() string {
	body := ""

	body += "#include <bits/stdc++.h>\n"
	body += "\n"
	body += "using namespace std;\n"
	body += "\n"
	body += "const int N = 1e5 + 7;\n"
	body += "const int INF = 1e9 + 7;\n"
	body += "const int MOD = 1e9 + 7;\n"
	body += "\n"
	body += "\n"
	body += "int solver() {\n"
	body += "\t// your code goes here\n"
	body += "\treturn 0;\n"
	body += "}\n"
	body += "\n"
	body += "\n"
	body += "int main() {\n"
	body += "\tios::sync_with_stdio(0), cin.tie(0);\n"
	body += "\tint tt = 1;\n"
	body += "\t// cin >> tt;\n"
	body += "\tfor (int t = 1; t <= tt; ++t) {\n"
	body += "\t\t// cout << \"Case \" << t << \": \";\n"
	body += "\t\tsolver();\n"
	body += "\t}\n"
	body += "\treturn 0;\n"
	body += "}"

	return body
}

func CopyTemplateToSource(cfg config.Configuration, problemId string) error {
	destPath := utils.GetSourceFilePathWithExt(cfg, problemId)
	problemInfo, _ := utils.GetProblemInfo(cfg, problemId)

	if !utils.IsFileExist(destPath) {
		return errors.New("source file not found")
	}

	header := getTemplateHeader(cfg.Author, problemInfo.Name)
	body := ""

	if cfg.TemplatePath != "" {
		srcPath := cfg.TemplatePath

		if !utils.IsFileExist(srcPath) {
			body = getGenericTemplateBody()
		} else {
			srcFile, err := os.Open(srcPath)
			if err != nil {
				body = getGenericTemplateBody()
			} else {
				defer srcFile.Close()
				scanner := bufio.NewScanner(srcFile)
				for scanner.Scan() {
					line := scanner.Text()
					line = strings.TrimRight(line, " ")
					body += line + "\n"
				}

				if err = scanner.Err(); err != nil {
					body = getGenericTemplateBody()
				}
			}
		}
	} else {
		body = getGenericTemplateBody()
	}

	template := header + body
	if err := ioutil.WriteFile(destPath, []byte(template), 0644); err != nil {
		return err
	}

	return nil
}

func CopyTemplateToSourceList(cfg config.Configuration, problemIdList []string) error {
	var err error = nil
	for _, problemId := range problemIdList {
		err = CopyTemplateToSource(cfg, problemId)
		if err != nil {
			fmt.Println(err.Error())
		}
	}
	return err
}

func CreateSource(cfg config.Configuration, problemId string) error {
	sourcePath := utils.GetSourceDirPath(cfg)
	sourceName := problemId + ".cpp"
	if err := utils.CreateFile(sourcePath, sourceName); err != nil {
		return err
		// ansi.Println(color.New(color.FgRed).Sprintf("error while creating source for task %v", problemId))
	}
	if err := CopyTemplateToSource(cfg, problemId); err != nil {
		return err
	}
	return nil
}

func CreateSourceList(cfg config.Configuration, problemIdList []string) error {
	var err error = nil
	for _, problemId := range problemIdList {
		err = CreateSource(cfg, problemId)
	}
	return err
}

func Source(cfg config.Configuration, cmd string) error {
	contestId, problemId, err := utils.ParseContestAndProblemId(cmd)
	if err != nil {
		return err
	}
	if problemId == "" {
		return errors.New("problem id not valid")
	}
	if contestId != "" {
		cfg.CurrentContestId = contestId
	}
	if cfg.CurrentContestId == "" {
		return errors.New("please set contest & problem id combination like 1512G")
	}

	if err := CreateSource(cfg, problemId); err != nil {
		return err
	}

	return nil
}
